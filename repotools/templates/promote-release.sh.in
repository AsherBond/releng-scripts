#!/bin/bash

VERSION=3.2
KEY=C1240596
TYPE=release
RELEASE_PATH=/srv/software/releases/eucalyptus/$VERSION
ENTERPRISE_RELEASE_PATH=/srv/software/releases/enterprise/$VERSION
SEND_NOTIFICATION=no
DO_RSYNC=no
NOTIFY_ADDRESS=@NOTIFY_ADDRESS@

export GNUPGHOME=@KEY_PATH@

log() {
	logger -t PROMOTE_RELEASE "$@"
}

fail() {
	local msg="ERROR: $@"
	logger -t PROMOTE_RELEASE -s "$msg"
	[ "$SEND_NOTIFICATION" = "yes" ] && notify_failure "$msg"
	exit 1
}

msg_body() {
	echo "$@"
	echo
    echo "Git Branch: $REPO_BRANCH"
	echo
	echo -n "Enterprise Commit Hash: "
	[ -n "$ENTERPRISE_COMMIT_HASH" ] && echo $ENTERPRISE_COMMIT_HASH \
		|| echo "unknown"
	echo -n "Eucalyptus Commit Hash: "
	[ -n "$EUCA_COMMIT_HASH" ] && echo $EUCA_COMMIT_HASH \
		|| echo "unknown"
}

notify_success() {
	msg_body "$@" | mail -s "Official Release Build Promotion Success" $NOTIFY_ADDRESS
}

notify_failure() {
	msg_body "$@" | mail -s "Official Release Build Promotion Failure" $NOTIFY_ADDRESS
}

if [ -z "$1" ]; then
	echo "Must specify a commit hash for release"
	exit 1
fi

ENTERPRISE_COMMIT_HASH=$(@PYTHON_VIRTENV@/bin/python @ARADO_HOME@/arado-describe-commit \
	-p enterprise -c $1 | sed 's/[\r\n]*$//')

log "Promote Enterprise Build \`$ENTERPRISE_COMMIT_HASH'"

# Promote enterprise bits to separate repository
@PYTHON_VIRTENV@/bin/python @ARADO_HOME@/arado-promote-build \
	-p enterprise -c $ENTERPRISE_COMMIT_HASH -r $VERSION -t $TYPE -k $KEY \
	|| fail "Promoting Enterprise Build"

log "Finished Enterprise Build Promotion"

rm -rf $ENTERPRISE_RELEASE_PATH/source

# Decide which commit hash to promote for Eucalyptus based on what the enterprise
# bits require.
EUCA_COMMIT_HASH=$(find $ENTERPRISE_RELEASE_PATH -name "*.rpm" \
	| xargs rpm -qp --requires - 2>/dev/null | sort -u \
	| grep "eucalyptus-abi(common-java)" | awk '{print $3}' | sed 's/[\r\n]*$//')

log "Enterprise build needs Eucalyptus \`$EUCA_COMMIT_HASH'"

EUCA_COMMIT_HASH_CHECK=$(@PYTHON_VIRTENV@/bin/python @ARADO_HOME@/arado-describe-commit \
	-p enterprise -c $EUCA_COMMIT_HASH | sed 's/[\r\n]*$//')

# We can promote the Eucalyptus build if this succeeds
if [ "x$EUCA_COMMIT_HASH" != "x$EUCA_COMMIT_HASH_CHECK" ]; then
	fail "Eucalyptus Build Not Found \`$EUCA_COMMIT_HASH'"
fi

log "Promote Eucalyptus Build \`$EUCA_COMMIT_HASH'"

# Here we do build promotion. We only need to sign on the last call since all
# builds are being pushed to the same repository.
@PYTHON_VIRTENV@/bin/python @ARADO_HOME@/arado-promote-build \
	-p eucalyptus -c $EUCA_COMMIT_HASH -r $VERSION -t $TYPE \
	|| fail "Promoting Eucalyptus Build"

@PYTHON_VIRTENV@/bin/python @ARADO_HOME@/arado-promote-build \
	-p eucadw -c maint/3.2/master -r $VERSION -t $TYPE -k $KEY -m \
	|| fail "Promoting EucaDW Build"

log "Installing Eucalyptus Release Packages"

# Build release packages and install them in the repository.
# Note that these are NOT signed packages and so can be installed
# by users without the need for a GPG key.
@NIGHTLY_PATH@/build-release.sh -t .el6 $RELEASE_PATH/centos/6/x86_64/ \
	|| fail "Building EL6 Release Package"
@NIGHTLY_PATH@/build-release.sh -t .el5 $RELEASE_PATH/centos/5/i386/ \
	|| fail "Building EL5 i386 Release Package"
@NIGHTLY_PATH@/build-release.sh -t .el5 $RELEASE_PATH/centos/5/x86_64/ \
	|| fail "Building EL5 x86_64 Release Package"

# Now copy over EPEL and ELRepo repository packages
cp -a @NIGHTLY_PATH@/packages/el5/*.rpm $RELEASE_PATH/centos/5/i386/ \
	|| fail "Installing EL5 i386 Release Package"
cp -a @NIGHTLY_PATH@/packages/el5/*.rpm $RELEASE_PATH/centos/5/x86_64/ \
	|| fail "Installing EL5 x86_64 Release Package"
cp -a @NIGHTLY_PATH@/packages/el6/*.rpm $RELEASE_PATH/centos/6/x86_64/ \
	|| fail "Installing EL6 Release Package"

@PYTHON_VIRTENV@/bin/python @ARADO_HOME@/arado-rebuild-repo \
	-p eucalyptus -c $EUCA_COMMIT_HASH -r $VERSION -t $TYPE -k $KEY \
	|| fail "Rebuilding Eucalyptus Repository"

# Clean up comps files
find $RELEASE_PATH -maxdepth 4 -name "*.xml" | xargs rm -f
find $ENTERPRISE_RELEASE_PATH -maxdepth 4 -name "*.xml" | xargs rm -f

log "Finished Eucalyptus Build Promotion"

if [ "$DO_RSYNC" = "yes" ]; then
	log "Syncing to Downloads"

	rsync -e "ssh -i @PRIVATE_KEY@" --delete -avz \
		--dry-run /srv/software/releases/enterprise/$VERSION/* \
		@REMOTE_SERVER@:/srv/software/releases/enterprise/$VERSION/ \
		|| fail "Syncing Enterprise Repository to Downloads"

	rsync -e "ssh -i @PRIVATE_KEY@" --delete -avz \
		--dry-run /srv/software/releases/eucalyptus/$VERSION/* \
		@REMOTE_SERVER@:/srv/software/releases/eucalyptus/$VERSION/ \
		|| fail "Syncing Eucalyptus Repository to Downloads"
fi

log "Build Promotion Complete"
[ "$SEND_NOTIFICATION" = "yes" ] && notify_success "Build Promotion Complete"

